{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf360
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww14380\viewh11540\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\f0\fs36 \cf0 First thing to notice is that there's a configuration file. We'll see some of what's in it later.\
\
There's also in-repl documentation.\
\
There's general documentation on, say, new repl functions\
	(doc midje-repl)       quick summary\
\
Also doc on certain categories. For example, I want to write a fact that checks a sequence without regard to order, and I've forgotten: is it :in-any-order or just :any-order\
\
	(doc midje-checkers)\
\
So let's write that fact.\
\
You see that it prints "namespace user" - that because I've set the print level in the config file.  Here are the different levels. \
\
       (doc midje-print-levels)\
\
Unlike previous midjes, facts are stored so that they can be rerun. There are a couple of ways to do that.\
\
      (recheck-fact)   -- this rechecks the last fact\
\
I expect this might be used in an editor/IDE interface to the rep\
\
You can also check all the facts like this.\
\
`check-facts` can take argument to tell it what to check. You can check all the facts in a particular namespace like this:\
\
	(check-facts 'user)\
\
You can also check only those facts that have matching metadata, such as a name. Let's add a name to the previous fact.\
\
First, let's retrieve it:\
\
	(source-of-last-fact-checked)\
\
Now I'll add a name, which is just the doc string.\
\
Notice that this *redefines* the fact with the same source. I make some effort to keep from getting multiple copies of the "same" fact, especially when you're loading files.\
\
So now I can run all matching facts:\
\
	(check-facts "nam" :print-facts)    Add a little verbosity\
\
To show you that it's really doing something\
\
	(check-facts "nameless")\
\
OK, now lets load some facts. I could type this to load everything:\
\
	(load-facts :all)\
\
But midge has a ton of facts, so let's just load a subset:\
\
	(load-facts 'midje.util.*)\
\
That's still too many, so let's just load a small one.\
\
	(load-facts 'midje.t-repl-helper :print-facts)\
\
Now all the facts are still loaded up, but the `load-facts` command has narrowed our I guess "working set" to just one namespace:\
\
	(check-facts)\
\
(Notice how it remembered the print level.)\
\
Let's look at the source for those two facts:\
\
(map (comp println fact-source) (fetch-facts))\
\
The keyword sets metadata true (you can also give a whole map). So we can ask for all "non-featherian" tests. \
\
	(check-facts :non-featherian)\
\
We can also load up only some of the facts in a namespace.\
\
	(load-facts :non-featherian)\
\
Notice that only one fact has been loaded and checked. Once all this stuff is integrated into `lein-midje`, you'll be able to run particular suites such as, say, all the integration tests. \
\
Having done this, let's forget all the facts:\
\
	(forget-facts :all)\
\
\
What else\'85.\
\
I hate having to go to the user's guide to look something up, so I'm starting to put links into the repl. Right now there are only two.\
\
	(guide)\
	(guide future-facts)\
\
Adding more pages would be a nice way to contribute to midge, hint hint.\
\
\
\
What's missing:\
\
As mentioned, lein midge needs to use this\
\
There's no autotest/lazy test -- explain -- this would also be a good user contrib thing, since it doesn't require that you learn the guts of midge. Because Any change to the source affects midge, and all the midge tests depend on midge, autotest is not a good fit for working on midge. And NO ONE WILL HIRE ME TO DO CONTRACT CLOJURE PROGRAMMING, so it won't be something I'll have a need for.\
\
Editor support. I want a really tight loop so that we can get test-driven development as fast as repl-driven development. \
\
Your advice. I seem to be obsessed with user experience all of a sudden, and you're presumably users.\
\
Thanks for watching.\
\
\
\
\
\
}